$gutter:30px;
$primary-font:"Poppins",sans-serif;
$background-color:#fefefe;
$clr-2:#6f69ac;
$clr-3:#80ed99;

*{
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body{
    font-family: $primary-font;
    background-color: $background-color;
}

.pricing{
    padding: 100px 0;
}

.cards-wrapper{
    display: flex;
    justify-content: center;
    max-width: 1440px;
    margin: 0 auto;
}

//placeholder selector
%price-card{
    margin-right: $gutter;
    &:last-child{
        margin-right: 0;
    }
    border: 5px solid var(--clr);
    padding: 40px 40px;
    background-color: #fff;
    border-radius: 10px;
    .fa-check{
        color: #57cc99;

    }

    .fa-times{
        color: #ff0000;
    }

}

.price-card.clr-1{
    @extend %price-card;
    --clr:#ffb319;
}

.price-card.clr-2{
    @extend %price-card;
    --clr:#{$clr-2};
    // 在 SCSS 中，变量和插值的使用方式有一些区别。
    // 直接使用变量：在 SCSS 中，如果你直接将一个变量赋值给另一个属性，比如 --clr: $clr-2;，这会被当作普通的 CSS 规则，将变量的值直接赋给 --clr。这种写法在编译为 CSS 后会产生类似 --clr: $clr-2; 的结果，而不是预期的变量值。这是因为 SCSS 并不会解析在 CSS 自定义属性中的 SCSS 变量。

    // 插值：在 SCSS 中，插值（Interpolation）是通过 #{$...} 语法实现的，它允许你在属性值中使用 SCSS 变量。比如 --clr: #{$clr-2};，这种写法会在编译为 CSS 时将 $clr-2 的值插入到 --clr 中。这样做可以确保在 CSS 中正确地使用了 SCSS 变量的值。
    // 所以，使用 --clr: #{$clr-2}; 能够使得在 CSS 中正确地使用 SCSS 变量的值，而直接使用 $clr-2 是无效的，因为 SCSS 不会在 CSS 自定义属性中解析变量。
}

.price-card.clr-3{
    @extend %price-card;
    --clr:#{$clr-3};
}

.price-container{
    width: 140px;
    height: 140px;
    background-color: var(--clr);
    border-radius: 50%;
    font-weight: bold;
    color: #fff;
    display: flex;
    justify-content: center;
    align-items: center;
    margin: 0 auto;
    //圆圈外面的那个圆边
    box-shadow: 0 0 0 5px #fff, 0 0 0 10px var(--clr);
}

.price{
    display: flex;
    span:first-child{font-size: 30px;}
    span:last-child{font-size: 50px;}
}

.plan{
    margin: 20px 0;
    text-transform: capitalize;
    font-size: 30px;
    color: #333;
    text-align: center;
    //伪类需参考这个position
    position: relative;
    &::before{
        content: '';
        width: 100%;
        height: 1px;
        background-color: var(--clr);
        position: absolute;
        left: 0;
        top: 50%;
        transform: translateY(-50%);
    }

    //文字部分留白
    span{
        background-color: #fff;
        padding: 0 20px;
        position: relative;
        z-index: 1;
    }
}

.features-wrapper{
    list-style: none;
}

.feature{
    display: flex;
    justify-content: space-between;
    align-items: center;
    font-size: 18px;

    &:not(:last-child){
        margin-bottom: 20px;
    }

    span:first-child{
        text-transform: capitalize;
        color: #333;
        margin-right: 15px;
    }
}

.align-center{
    text-align: center;
}

.btn{
    display: inline-block;
    margin-top: 45px;
    padding: 10px 20px;
    border: 3px solid var(--clr);
    border-radius: 30px;
    text-decoration: none;
    font-size: 18px;
    color: var(--clr);
    transition: all 0.3s ease-in-out;
    &:hover{
        color: #fff;
        background-color: var(--clr);
    }
}


@media (max-width:1100px){
    .cards-wrapper{
        flex-wrap: wrap;
    }

    .price-card{
        width: calc(50% - $gutter*2);
        &:nth-child(2){
            margin-right: 0;
        }
        &:not(:first-child):not(:nth-child(2)){
            margin-top: $gutter;
        }
    }
}

@media (max-width: 800px){
    .cards-wrapper{
        flex-direction: column;
        align-items: center;
        width: 80%;
    }

    .price-card{
        width: 100%;
        &:first-child{
            margin-right: 0;
        }
        &:last-child{
            margin-top: 0;
        }
        &:not(:last-child){
            margin-bottom: $gutter;
        }
    }
}